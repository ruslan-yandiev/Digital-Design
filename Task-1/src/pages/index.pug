extends ../layouts/main

block variables
  -
    var title = "Web Workers";
    var description = "description for Web Workers";
    var pageClass = "index-page";

block content
  //- контент
  .content
    img(src='img/web-workers.jpg' alt="Web Workers" class='my-img')
    h1(id="h1-0") Web Workers
    div(class='content__1 _step')
      p Сам по себе JavaScript отднопоточный язык, которой не может выполнять одновременно несколько скриптов. Отчасти это хорошо, так-как мы избавлена от ряда проблем которые могут возникнуть при многопоточном программировании. 
      p С этим ограничением код JavaScript вынужден быть эффективным с самого начала. Дорогостоящие операции должны быть асинхронными, чтобы избежать блокировки потока.
      p По мере роста потребностей и усложнения программ, такого рода ограничения в  JavaScript сильно ограничивали разработчиков. Что собственно и послужило причиной появления web-workers.
      p Веб-воркеры предоставляют возможность параллельного выполнения кода внутри браузера.
      p Но у них довольно много ограничений:
      div(class='list-1')
        ul
          li - нет доступа к 
            a(href="https://learn.javascript.ru/dom-nodes") DOM
            |: объекту Window и объекту Document
          li - они могут общаться с основной программой JavaScript, используя обмен сообщениями
          li - они должны быть загружены из одного и того же источника (домен, порт и протокол)
          li - они не работают, если вы обслуживаете страницу с использованием файлового протокола ( file://)
      p Worker - это объект, создаваемый конструктором (например, Worker()) и запускающий именной JavaScript файл — этот файл содержит код, который будет выполнен в потоке Worker'а; объекты же Workers запускаются в другом глобальном контексте, отличающемся от текущего, - window. Поэтому использование переменной window для получения текущего глобального контекста (вместо self) внутри Worker вернёт ошибку.
      p Контекст Worker'а представлен объектом 
        a(href='https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope') DedicatedWorkerGlobalScope 
        |в случае выделенных Workers (обычные Workers используются одним скриптом; совместные Workers используют объект 
        a(href='https://developer.mozilla.org/en-US/docs/Web/API/SharedWorkerGlobalScope') SharedWorkerGlobalScope. 
        |Выделенный Worker доступен только из скрипта-родителя, в то время как совместные Workers могут быть доступны из нескольких сценариев.

    h2(id="h2-1") Поддержка браузеров для Web-Workers
    div(class='content__2 _step')
      img(src='img/browser-support-web-workers.png' alt="поддержка браузеров" class='my-img')


    h2(id="h2-2")  Создание веб-воркера
    div(class='content__3 _step')
      p Объекты Web Worker запускаются в изолированном потоке. По этой причине выполняемый ими код должен храниться в отдельном файле. Однако сначала необходимо создать новый объект Worker на главной странице. Конструктор принимает название скрипта объекта:
      pre
        code const worker = new Worker('task.js');
      p Если указанный файл существует, браузер создаст новый поток объекта Worker, загружаемый асинхронно. Объект не запускается до полной загрузки и выполнения файла. Если путь к объекту Worker возвращает ошибку 404, его выполнение прекращается без уведомлений.
      p После создания объекта Worker его можно запустить с помощью метода postMessage().
      pre
        code worker.postMessage(); // Start the worker



    h2(id="h2-3") Взаимодействие с объектами Worker
    div(class='content__4 _step')
      p Взаимодействие объекта Worker с исходной страницей осуществляется с помощью модели событий и метода 
        code postMessage() 
        |. В зависимости от типа и версии браузера метод 
        code postMessage() 
        |принимает строку или объект JSON в качестве единственного аргумента. Новейшие версии современных браузеров поддерживают передачу объектов JSON.

      p Ниже приведен пример использования строки для передачи сообщения Hello World объекту Worker в скрипте doWork.js. Объект Worker просто возвращает полученное сообщение.
      p Основной скрипт:
        pre var worker = new Worker('doWork.js');
        pre worker.addEventListener('message', function(e) {
        pre   console.log('Worker said: ', e.data);
        pre }, false);
        pre worker.postMessage('Hello World'); // Send data to our worker
      p doWork.js (объект Worker)
        pre self.addEventListener('message', function(e) {
        pre   self.postMessage(e.data);
        pre }, false);
      p Если метод 
        code postMessage()
        |вызывается на главной странице, объект Worker обрабатывает сообщение, определяя обработчик onmessage для события message. Информационное наполнение сообщения (в данном случае – Hello World) доступно в объекте Event.data. Хотя этот конкретный пример и не является интересным, он демонстрирует, что метод 
        code postMessage()
        |также служит для передачи данных обратно в главный поток.
      p Сообщения, передаваемые между главной страницей и объектами Worker, копируются, но общий доступ к ним не предоставляется. Так, в следующем примере свойство msg сообщения JSON доступно в обоих местах. Может показаться, что элемент передается непосредственно объекту Worker, хотя действие выполняется в выделенном пространстве. В действительности при передаче в объект Worker элемент преобразуется в последовательную форму, а обратное преобразование затем происходит в конце пути. Страница и объект Worker не имеют общего доступа к одному экземпляру элемента, и в результате каждый раз при передаче создается его дубликат. Большинство браузеров реализуют эту функцию путем автоматической кодировки и декодирования значения в конечных точках маршрута, используя для этого технологию JSON.

    h2(id="h2-4") Жизненный цикл веб-воркера
    div(class='content__5 _step')
      p Веб-воркеры запускаются, и если они не остаются в режиме прослушивания сообщений с помощью 
        code worker.onmessageили
        | путем добавления прослушивателя событий, они будут закрыты, как только их код завершится.
      p Web Worker можно остановить с помощью его 
        code terminate()
        | метода из основного потока, а внутри самого worker с помощью глобального метода 
        code close():
      pre const worker = new Worker('worker.js')
      pre worker.postMessage('hello')
      pre worker.terminate()
      br
      pre worker.onmessage = event => {
      pre   console.log(event.data)
      pre   close()
      pre }
      pre
      pre worker.onerror = event => {
      pre   console.error(event.message)
      pre }

    h2(id="h2-5") Загрузка библиотек в Web Worker
    div(class='content__6 _step')
      p Веб-воркеры могут использовать 
        code importScripts()
        |глобальную функцию, определенную в их глобальной области видимости:

      pre importScripts('../utils/file.js', './something.js')
    
    h2(id="h2-6") Примеры использования
    div(class='content__7 _step')
      p Какие виды программ используют объекты Web Worker? К сожалению, эти объекты являются относительно новой технологией, и в большинстве существующих примеров и руководств представлена обработка простых чисел. Хотя это не самое захватывающее занятие, оно полезно для понимания принципов работы объектов Web Worker. Ниже приведено несколько идей, о реализации которых можно подумать.
      div(class='list-1')
        ul
          li - Предварительный выбор или кэширование данных для дальнейшего использования.
          li - Синтаксическое выделение кода или другое форматирование текста в реальном времени.
          li - Проверка правописания.
          li - Анализ видео- и аудиоданных.
          li - Фоновые операции ввода-вывода и опрос веб-служб.
          li - Обработка больших массивов данных и объемных ответов JSON.
          li - Обновление множества строк в локальной веб-базе данных.
      







